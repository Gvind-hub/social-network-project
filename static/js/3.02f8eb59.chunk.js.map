{"version":3,"sources":["hoc/withAuthRedirect.js","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatus.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["withAuthRedirect","Component","RedirectComponent","this","props","isAuth","to","React","connect","state","auth","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","className","s","desctiptionBlock","src","photos","large","userPhoto","alt","Preloader","Post","item","message","likesCount","maxLength10","maxLengthCreator","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","name","component","Textarea","placeholder","validate","required","MyPosts","memo","console","log","postsElements","posts","map","p","postsBlock","values","addPost","newPostText","MyPostsContainer","profilePage","dispatch","addPostActionCreator","Profile","ProfileContainer","userId","match","params","authorizedUserId","history","push","getUserProfile","getStatus","compose","id","withRouter"],"mappings":"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","file":"static/js/3.02f8eb59.chunk.js","sourcesContent":["import React from \"react\";\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nexport const withAuthRedirect = (Component) => {\n    class RedirectComponent extends React.Component {\n        render() {\n            if (!this.props.isAuth) return <Redirect to='/login' />\n\n            return <Component {...this.props} />\n        }\n    }\n\n    let mapStateToPropsForRedirect = (state) => ({\n\n        isAuth: state.auth.isAuth\n\n    })\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\n\n    return ConnectedAuthRedirectComponent;\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"desctiptionBlock\":\"ProfileInfo_desctiptionBlock__J6lJQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__FkZdt\",\"posts\":\"MyPosts_posts__1PnTI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__hM7ZB\"};","import React from 'react';\n\nclass ProfileStatus extends React.Component {\n\n    //local state\n    state = {\n        editMode: false,\n        status: this.props.status\n    };\n\n    activateEditMode = () => {\n        this.setState(\n            {\n                editMode: true\n            }\n        );\n    };\n    deactivateEditMode = () => {\n        this.setState(\n            {\n                editMode: false\n            }\n        );\n        this.props.updateStatus(this.state.status);\n    };\n\n    onStatusChange = (e) => {\n        this.setState({status: (e).currentTarget.value})\n    };\n\n    componentDidUpdate(prevProps, prevState) {\n        if (prevProps.status !== this.props.status) {\n            this.setState({status: this.props.status})\n        }\n    };\n\n\n    render() {\n        return (\n            <div>\n                {!this.state.editMode &&\n                <div>\n                    <span onDoubleClick={this.activateEditMode}>{this.props.status || \"No status\"}</span>\n                </div>\n                }\n                {this.state.editMode &&\n                <div>\n                    <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deactivateEditMode} value={this.state.status}/>\n                </div>\n                }\n            </div>\n        );\n    }\n\n};\n\nexport default ProfileStatus;\n","import React, {useEffect, useState} from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../common/Preloader/Preloader\";\n\n\nconst ProfileStatusWithHooks = (props) => {\n\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status);\n\n    useEffect(() => {\n        setStatus(props.status);\n    },[props.status])\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateStatus(status)\n    }\n\n    const onStatusChange = (e) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    return (\n        <div>\n            {!editMode &&\n            <div>\n                <span onDoubleClick={activateEditMode}>{props.status || \"No status\"}</span>\n            </div>\n            }\n            {editMode &&\n            <div>\n                <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditMode} value = {status} />\n            </div>\n            }\n        </div>\n    );\n};\n\nexport default ProfileStatusWithHooks;\n","import React from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport userPhoto from \"../../../Assets/Images/icons-user.png\";\r\nimport ProfileStatus from \"./ProfileStatus\"\r\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\r\n\r\nconst ProfileInfo = ({profile, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.desctiptionBlock}>\r\n                <img src={profile.photos.large != null ? profile.photos.large : userPhoto} alt=\"\"/>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div>\r\n            <div className={s.item}>\r\n                <img src=\"https://images.theconversation.com/files/304864/original/file-20191203-67028-qfiw3k.jpeg?ixlib=rb-1.1.0&rect=638%2C2%2C795%2C745&q=45&auto=format&w=496&fit=clip\" alt=\"\"/>\r\n                { props.message }\r\n\r\n                <div><span>like  { props.likesCount }</span></div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Post;\r\n\r\n","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\nimport {maxLengthCreator, required} from \"../../../Utils/Validators/validators\";\r\nimport {Textarea} from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name=\"newPostText\" component={Textarea} placeholder=\"Post message\"\r\n                       validate={[required, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>Add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n};\r\n\r\nconst AddNewPostReduxForm = reduxForm({form: \"ProfileAddNewPostForm\"})(AddNewPostForm);\r\n\r\nconst MyPosts = React.memo(props => {\r\n    console.log('render')\r\n    let postsElements = props.posts.map(p => <Post message={p.message} likesCount={p.likesCount}/>);\r\n\r\n    // let newPostElement = React.createRef();\r\n\r\n    let onAddPost = (values) => {\r\n        props.addPost(values.newPostText);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostReduxForm onSubmit={onAddPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default MyPosts;\r\n\r\n","import React from 'react';\r\nimport {addPostActionCreator} from \"../../../redux/profile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToProps = (state) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostActionCreator(newPostText));\r\n        }\r\n    }\r\n\r\n};\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;\r\n\r\n","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId;\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId);\r\n        this.props.getStatus(userId);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatus}/>\r\n        );\r\n    }\r\n\r\n};\r\n\r\nlet mapStateToProps = (state) => ({\r\n\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.id,\r\n    isAuth: state.auth.isAuth\r\n\r\n})\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n// let AuthRedirectComponent = withAuthRedirect(ProfileContainer);\r\n//\r\n//\r\n\r\n//\r\n// let WithUrlDataContainerComponent = withRouter(AuthRedirectComponent);\r\n//\r\n// export default connect(mapStateToProps, {getUserProfile})(WithUrlDataContainerComponent);\r\n"],"sourceRoot":""}